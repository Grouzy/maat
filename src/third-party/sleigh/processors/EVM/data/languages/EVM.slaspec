define endian=big;
define alignment=1;

# The RAM is used to store the contract code
define space code type=ram_space size=1 wordsize=1 default;

# Stack helpers
define pcodeop stack_pop; # pop one word from stack
define pcodeop stack_push; # push one word to stack
define pcodeop stack_get; # get one word from stack at given position
define pcodeop stack_set; # write one word to stack at given position

# Instructions that can't be lifted to pcode
define pcodeop stop; # STOP
define pcodeop evm_div; # DIV that allows dividing by 0
define pcodeop evm_sdiv; # SDIV that allows dividing by 0
define pcodeop evm_mod; # MOD that allows dividing by 0
define pcodeop evm_smod; # SMOD that allows dividing by 0
define pcodeop evm_exp; # EXP
define pcodeop evm_signextend; # SIGNEXTEND with variable # of bytes to extend
define pcodeop evm_byte; # BYTE, extract single byte from word


# Opcode token: EVM opcodes take 1 byte
define token opcode(8)
	op = (0,7)
;

:STOP is op = 0x0 {
    stop();
}

:ADD is op = 0x1 {
    local tmp1:32 = stack_pop();
    local tmp2:32 = stack_pop();
    stack_push(tmp1+tmp2);
}

:MUL is op = 0x2 {
    local tmp1:32 = stack_pop();
    local tmp2:32 = stack_pop();
    stack_push(tmp1*tmp2);
}

:SUB is op = 0x3 {
    local tmp1:32 = stack_pop();
    local tmp2:32 = stack_pop();
    stack_push(tmp1-tmp2);
}

:DIV is op = 0x4 {
    local tmp1:32 = stack_pop();
    local tmp2:32 = stack_pop();
    local res:32 = evm_div(tmp1, tmp2);
    stack_push(res);
}

:SDIV is op = 0x5 {
    local tmp1:32 = stack_pop();
    local tmp2:32 = stack_pop();
    local res:32 = evm_sdiv(tmp1, tmp2);
    stack_push(res);
}

:MOD is op = 0x6 {
    local tmp1:32 = stack_pop();
    local tmp2:32 = stack_pop();
    local res:32 = evm_mod(tmp1, tmp2);
    stack_push(res);
}

:SMOD is op = 0x7 {
    local tmp1:32 = stack_pop();
    local tmp2:32 = stack_pop();
    local res:32 = evm_smod(tmp1, tmp2);
    stack_push(res);
}

:ADDMOD is op = 0x8 {
    local tmp:32 = stack_pop();
    local arg1:64 = zext(tmp);
    tmp = stack_pop();
    local arg2:64 = zext(tmp);
    tmp = stack_pop();
    local arg3:64 = zext(tmp);

    local res:64 = evm_mod(arg1+arg2, arg3);
    stack_push(res[0,256]);
}

:MULMOD is op = 0x9 {
    local tmp:32 = stack_pop();
    local arg1:64 = zext(tmp);
    tmp = stack_pop();
    local arg2:64 = zext(tmp);
    tmp = stack_pop();
    local arg3:64 = zext(tmp);

    local res:64 = evm_mod(arg1*arg2, arg3);
    stack_push(res[0,256]);
}

:EXP is op = 0xa {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    local res:32 = evm_exp(arg1, arg2);
    stack_push(res);
}

:SIGNEXTEND is op = 0xb {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    local res:32 = evm_signextend(arg1, arg2);
    stack_push(res);
}

:LT is op = 0x10 {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    local res:32 = zext(arg1 < arg2);
    stack_push(res);
}

:GT is op = 0x11 {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    local res:32 = zext(arg1 > arg2);
    stack_push(res);
}

:SLT is op = 0x12 {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    local res:32 = zext(arg1 s< arg2);
    stack_push(res);
}

:SGT is op = 0x13 {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    local res:32 = zext(arg1 s> arg2);
    stack_push(res);
}

:EQ is op = 0x14 {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    local res:32 = zext(arg1 == arg2);
    stack_push(res);
}

:ISZERO is op = 0x15 {
    local arg1:32 = stack_pop();
    local res:32 = zext(arg1 == 0:32);
    stack_push(res);
}

:AND is op = 0x16 {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    stack_push(arg1 & arg2);
}

:OR is op = 0x17 {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    stack_push(arg1 | arg2);
}

:XOR is op = 0x18 {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    stack_push(arg1 ^ arg2);
}

:NOT is op = 0x19 {
    local arg1:32 = stack_pop();
    stack_push(~arg1);
}

:BYTE is op = 0x1a {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    local res:32 = evm_byte(arg1, arg2);
    stack_push(res);
}

:SHL is op = 0x1b {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    stack_push(arg2 << arg1);
}

:SHR is op = 0x1c {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    stack_push(arg2 >> arg1);
}

:SAR is op = 0x1d {
    local arg1:32 = stack_pop();
    local arg2:32 = stack_pop();
    stack_push(arg2 s>> arg1);
}


# TODO: 0x30's message operations
# TODO: 0x40's block operations

:POP is op = 0x50 {
    local tmp:32 = stack_pop();
}

